events {
}

http {
    error_log /dev/stdout info;
    # Shared memory zone for rate limiting
    lua_shared_dict my_limit_store 10m;

    # Lua package path (adjust the path to where your Lua scripts are)
    lua_package_path "/usr/local/openresty/nginx/lua/?.lua;;";

    # Server configuration
    server {
        listen 80;

        # Custom error handling for rate limits
        error_page 429 /custom_429.html;

         location = /custom_429.html {
            internal;
            content_by_lua_block {
                ngx.say("Rate limit exceeded")
            }
        }

        location = /auth {
            internal;
            access_by_lua_file /usr/local/openresty/nginx/lua/rate_limiting.lua;
            proxy_pass http://auth-service:5050/authenticate-token;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header X-Original-URI $request_uri;
        }

        location = /create-token {
            access_by_lua_file /usr/local/openresty/nginx/lua/rate_limiting.lua;
            proxy_pass http://auth-service:5050/create-token;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location / {
            access_by_lua_file /usr/local/openresty/nginx/lua/rate_limiting.lua;
            auth_request /auth;
            auth_request_set $auth_status $upstream_status;
            error_page 401 = @error401;

            proxy_pass http://json-server:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location @error401 {
            return 401 'Authentication Failed\n';
        }
    }
}


# http {
#     # Specify the path to your Lua scripts
#     lua_package_path "/usr/local/openresty/nginx/lua/?.lua;;";

#     # Load the Lua script for JWT decoding
#     init_by_lua_block {
#         jwt_decode = require "jwt-decode"
#     }

#     # Define a map to set a variable based on the username
#     map $username $is_john_doe {
#         default 0;
#         john_doe 1;
#     }

#     # Define a rate limit zone
#     limit_req_zone $binary_remote_addr zone=userlimit:10m rate=5r/s;

#     server {
#         listen 80;

#         # Extract the username from the JWT token
#         set_by_lua_block $username {
#             return jwt_decode()
#         }

#         # Custom error handling for rate limits
#         error_page 429 = @ratelimit;

#         location / {
#             # Apply rate limiting for john_doe
#             if ($is_john_doe) {
#                 limit_req zone=userlimit burst=20 nodelay;
#             }

#             auth_request /auth;  # Perform authentication for requests
#             auth_request_set $auth_status $upstream_status;  # Capture auth response status
#             error_page 401 = @error401;  # Handle unauthorized access

#             # Proxy pass to backend service
#             proxy_pass http://json-server:3000;
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#             proxy_set_header X-Forwarded-Proto $scheme;
#         }

#         # Internal location for handling authentication
#         location = /auth {
#             internal;
#             proxy_pass http://auth-service:5050/authenticate-token;
#             proxy_set_header Authorization $http_authorization;
#             proxy_set_header X-Original-URI $request_uri;
#         }

#         # Location for token creation
#         location = /create-token {
#             proxy_pass http://auth-service:5050/create-token;
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#             proxy_set_header X-Forwarded-Proto $scheme;
#         }

#         # Custom error handling for unauthorized access
#         location @error401 {
#             return 401 'Authentication Failed\n';
#         }

#         # Custom error handling for rate limiting
#         location @ratelimit {
#             return 429 'Too Many Requests\n';
#         }
#     }
# }
